[core]
    pager = delta
    excludesfile = ~/.gitignore
    editor = nvim
[alias]
    # Log and history
    l = log --pretty=custom
    lg = log --graph --pretty=custom -20
    last = log -1 HEAD
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    bl = blame -w -C # ignore whitespace changes and follow code movement commits
    
    # Staging and committing
    unstage = reset HEAD --
    amend = commit --amend -m
    undo = reset --soft HEAD^
    wip = !git add -A && git commit -m "WIP"
    save = !git add -A && git commit -m "SAVEPOINT"
    
    # Branching and merging
    co = checkout
    cob = checkout -b
    cpick = cherry-pick
    compare = diff --cached # view the changes you staged for the next commit relative to HEAD
    
    # Remote operations
    fpush = push --force-with-lease # force push will fail if someone updated the remote ref (not overriding their changes by accident)
    sync = !git fetch origin && git rebase origin/$(git branch --show-current)
    
    # Branch management
    cleanup = "!git branch --merged | grep  -v '\\*\\|master\\|develop\\|main' | xargs -n 1 git branch -d"
    gone = !git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}' | xargs -r git branch -D
    recent = branch --sort=-committerdate
    
    # Worktree management
    wt = worktree
    wtls = worktree list
    wtadd = worktree add
    wtrm = worktree remove
    
    # Interactive rebase helpers
    ri = rebase -i
    rc = rebase --continue
    ra = rebase --abort
    fixup = !sh -c 'REV=$(git rev-parse $1) && git commit --fixup $@ && git rebase -i --autosquash $REV^' -
    squash = !sh -c 'REV=$(git rev-parse $1) && git commit --squash $@ && git rebase -i --autosquash $REV^' -
    
    # Stash operations
    sl = stash list
    sa = stash apply
    ss = stash save
    stash-all = stash save --include-untracked
    stash-unapply = !git stash show -p | git apply -R
    
    # Advanced operations
    graph = log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit
    find = !git log --pretty=format:'%C(yellow)%h %Creset%s' --grep
    optimize = !git maintenance run --task=gc --task=commit-graph --task=loose-objects --task=incremental-repack
[filter "lfs"]
    process = git-lfs filter-process
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
[pull]
    rebase = true
[rebase]
    autoStash = true # Stash and pop uncommitted changes on rebase
    autosquash = true
[init]
    defaultBranch = main
[commit]
	gpgsign = true
[tag]
	gpgsign = true
[gpg]
	program = /opt/homebrew/bin/gpg
[merge]
    conflictstyle = diff3
    tool = vimdiff
[mergetool "vimdiff"]
    path = nvim
    keepBackup = false
[diff]
    colorMoved = default
    algorithm = histogram
    compactionHeuristic = true 
[push]
    autoSetupRemote = true
    followTags = true
[interactive]
    diffFilter = delta --color-only
[rerere]
    enabled = true # remember each side of a conflict and apply the recorded resolution next time the same conflict reappears. 
    autoUpdate = true
[branch]
    sort = -committerdate
[column]
    ui = auto
[transfer]
    fsckObjects = true
[fetch]
    fsckObjects = true
    prune = true
    pruneTags = true
[receive]
    fsckObjects = true
[gc]
    auto = 256
[maintenance]
    auto = false
[core]
    preloadindex = true
    fscache = true
[feature]
    manyFiles = true # Optimize for repos with many files
    experimental = true # Enable experimental performance features
[pack]
    threads = 0 # Use all CPU cores for packing objects
[protocol]
    version = 2 # Use newer, more efficient Git protocol
[blame]
    coloring = highlightRecent # Color blame by age
    date = relative # Show relative dates in blame
[status]
    submoduleSummary = true # Show submodule changes in status
[credential]
    helper = osxkeychain
    useHttpPath = true
[pretty]
    custom = "%C(blue)%h %C(green) %s %C(magenta)%(decorate:prefix=,suffix=,tag= ,pointer=  ) %n%C(cyan) %an  %C(cyan)%ar%n"
    #                  │        │                   │                                                         │             └─ date relativ
    #                  │        │                   │                                                         └─ author name
    #                  │        │                   └─ decorations(branch, heads or tags)
    #                  │        └─ message
    #                  └─ hash (abbreviated)

; [split-diffs] # alternative to delta
    # turn off syntax highlighting
    # syntax-highlighting-theme = 
[delta]
  dark = true
  diff-highlight = true
	file-decoration-style = black ul
	file-style = "#b5bfe2" 
  hunk-header-decoration-style = omit
  hunk-header-file-style = "#b5bfe2"
	hunk-header-line-number-style = bold "#b5bfe2"
  hunk-header-style = file line-number
  hunk-label = " @@@"
  line-numbers = true
	line-numbers-left-format = {nm:>3}│
	line-numbers-left-style = "#838ba7"
	line-numbers-minus-style = "#838ba7"
	line-numbers-plus-style = "#838ba7" 
	line-numbers-right-format = {np:>3}│
	line-numbers-right-style ="#838ba7" 
	line-numbers-zero-style ="#838ba7" 
	minus-emph-style = white bold "#85494a" 
	minus-style = red
	plus-emph-style = white bold "#467050"
	plus-style = green
	side-by-side = true
	true-color = auto
	zero-style = "#838ba7"

[user]
    #configured in `~/.gitconfig.local`
[include]
    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    #
    # [!] The following needs to remain at the end of this file in
    #     order to allow any of the above configs to be overwritten
    #     by the local ones
    path = ~/.gitconfig.local
[credential "https://github.com"]
	helper = 
	helper = !/opt/homebrew/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper = 
	helper = !/opt/homebrew/bin/gh auth git-credential
